//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Musicalog.CatalogServiceClient {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Album", Namespace="http://schemas.datacontract.org/2004/07/CatalogService.Models")]
    [System.SerializableAttribute()]
    public partial class Album : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AlbumIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AlbumNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AlbumID {
            get {
                return this.AlbumIDField;
            }
            set {
                if ((this.AlbumIDField.Equals(value) != true)) {
                    this.AlbumIDField = value;
                    this.RaisePropertyChanged("AlbumID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlbumName {
            get {
                return this.AlbumNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumNameField, value) != true)) {
                    this.AlbumNameField = value;
                    this.RaisePropertyChanged("AlbumName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Artist {
            get {
                return this.ArtistField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistField, value) != true)) {
                    this.ArtistField = value;
                    this.RaisePropertyChanged("Artist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Stock {
            get {
                return this.StockField;
            }
            set {
                if ((this.StockField.Equals(value) != true)) {
                    this.StockField = value;
                    this.RaisePropertyChanged("Stock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CatalogServiceClient.ICatalogService")]
    public interface ICatalogService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/GetAlbumRecord", ReplyAction="http://tempuri.org/ICatalogService/GetAlbumRecordResponse")]
        Musicalog.CatalogServiceClient.Album GetAlbumRecord(int albumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/GetAlbumRecord", ReplyAction="http://tempuri.org/ICatalogService/GetAlbumRecordResponse")]
        System.Threading.Tasks.Task<Musicalog.CatalogServiceClient.Album> GetAlbumRecordAsync(int albumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/AddAlbumRecord", ReplyAction="http://tempuri.org/ICatalogService/AddAlbumRecordResponse")]
        string AddAlbumRecord(Musicalog.CatalogServiceClient.Album albumRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/AddAlbumRecord", ReplyAction="http://tempuri.org/ICatalogService/AddAlbumRecordResponse")]
        System.Threading.Tasks.Task<string> AddAlbumRecordAsync(Musicalog.CatalogServiceClient.Album albumRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/GetAlbumCatalog", ReplyAction="http://tempuri.org/ICatalogService/GetAlbumCatalogResponse")]
        Musicalog.CatalogServiceClient.Album[] GetAlbumCatalog();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/GetAlbumCatalog", ReplyAction="http://tempuri.org/ICatalogService/GetAlbumCatalogResponse")]
        System.Threading.Tasks.Task<Musicalog.CatalogServiceClient.Album[]> GetAlbumCatalogAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/DeleteAlbum", ReplyAction="http://tempuri.org/ICatalogService/DeleteAlbumResponse")]
        string DeleteAlbum(int albumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/DeleteAlbum", ReplyAction="http://tempuri.org/ICatalogService/DeleteAlbumResponse")]
        System.Threading.Tasks.Task<string> DeleteAlbumAsync(int albumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/UpdateAlbum", ReplyAction="http://tempuri.org/ICatalogService/UpdateAlbumResponse")]
        string UpdateAlbum(Musicalog.CatalogServiceClient.Album emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/UpdateAlbum", ReplyAction="http://tempuri.org/ICatalogService/UpdateAlbumResponse")]
        System.Threading.Tasks.Task<string> UpdateAlbumAsync(Musicalog.CatalogServiceClient.Album emp);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICatalogServiceChannel : Musicalog.CatalogServiceClient.ICatalogService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CatalogServiceClient : System.ServiceModel.ClientBase<Musicalog.CatalogServiceClient.ICatalogService>, Musicalog.CatalogServiceClient.ICatalogService {
        
        public CatalogServiceClient() {
        }
        
        public CatalogServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CatalogServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CatalogServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CatalogServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Musicalog.CatalogServiceClient.Album GetAlbumRecord(int albumID) {
            return base.Channel.GetAlbumRecord(albumID);
        }
        
        public System.Threading.Tasks.Task<Musicalog.CatalogServiceClient.Album> GetAlbumRecordAsync(int albumID) {
            return base.Channel.GetAlbumRecordAsync(albumID);
        }
        
        public string AddAlbumRecord(Musicalog.CatalogServiceClient.Album albumRecord) {
            return base.Channel.AddAlbumRecord(albumRecord);
        }
        
        public System.Threading.Tasks.Task<string> AddAlbumRecordAsync(Musicalog.CatalogServiceClient.Album albumRecord) {
            return base.Channel.AddAlbumRecordAsync(albumRecord);
        }
        
        public Musicalog.CatalogServiceClient.Album[] GetAlbumCatalog() {
            return base.Channel.GetAlbumCatalog();
        }
        
        public System.Threading.Tasks.Task<Musicalog.CatalogServiceClient.Album[]> GetAlbumCatalogAsync() {
            return base.Channel.GetAlbumCatalogAsync();
        }
        
        public string DeleteAlbum(int albumID) {
            return base.Channel.DeleteAlbum(albumID);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAlbumAsync(int albumID) {
            return base.Channel.DeleteAlbumAsync(albumID);
        }
        
        public string UpdateAlbum(Musicalog.CatalogServiceClient.Album emp) {
            return base.Channel.UpdateAlbum(emp);
        }
        
        public System.Threading.Tasks.Task<string> UpdateAlbumAsync(Musicalog.CatalogServiceClient.Album emp) {
            return base.Channel.UpdateAlbumAsync(emp);
        }
    }
}
